(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.imer = {})));
}(this, (function (exports) { 'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  // produce(currentState, producer: (draftState) => void): nextState
  var INTERNAL_STATE_KEY = Symbol('state');

  function proxyProp(propValue, propKey, hostDraftState) {
    var originalValue = hostDraftState.originalValue,
        draftValue = hostDraftState.draftValue,
        onWrite = hostDraftState.onWrite;
    return proxy(propValue, function (value) {
      if (!draftValue.mutated) {
        hostDraftState.mutated = true; // 拷贝host所有属性

        copyProps(draftValue, originalValue);
      }

      draftValue[propKey] = value;

      if (onWrite) {
        onWrite(draftValue);
      }
    });
  } // 跳过target身上已有的属性


  function copyProps(target, source) {
    if (Array.isArray(target)) {
      for (var i = 0; i < source.length; i++) {
        // 跳过在更深层已经被改过的属性
        if (!(i in target)) {
          target[i] = source[i];
        }
      }
    } else {
      Reflect.ownKeys(source).forEach(function (key) {
        var desc = Object.getOwnPropertyDescriptor(source, key); // 跳过已有属性

        if (!(key in target)) {
          Object.defineProperty(target, key, desc);
        }
      });
    }
  }

  function copyOnWrite(draftState) {
    var originalValue = draftState.originalValue,
        draftValue = draftState.draftValue,
        mutated = draftState.mutated,
        onWrite = draftState.onWrite;

    if (!mutated) {
      draftState.mutated = true; // 下一层有修改时才往父级 draftValue 上挂

      if (onWrite) {
        onWrite(draftValue);
      } // 第一次写时复制


      copyProps(draftValue, originalValue);
    }
  }

  function getTarget(draftState) {
    return draftState.mutated ? draftState.draftValue : draftState.originalValue;
  }

  function getCleanCopy(obj) {
    return Object.create(Object.getPrototypeOf(obj));
  }

  function proxy(original, onWrite) {
    var isArrayValue = Array.isArray(original); // 创建一份干净的draft值

    var draftValue = isArrayValue ? [] : getCleanCopy(original);
    var proxiedKeyMap = Object.create(null);
    var draftState = {
      originalValue: original,
      draftValue: draftValue,
      mutated: false,
      onWrite: onWrite
    };
    var draft = new Proxy(original, {
      get: function get(target, key, receiver) {
        // 建立proxy到draft值的关联
        if (key === INTERNAL_STATE_KEY) {
          return draftState;
        } // 优先走已创建的代理


        if (key in proxiedKeyMap) {
          return proxiedKeyMap[key];
        } // 代理属性访问


        if (_typeof(original[key]) === 'object' && original[key] !== null) {
          // 不为基本值类型的现有属性，创建下一层代理
          proxiedKeyMap[key] = proxyProp(original[key], key, draftState, onWrite);
          return proxiedKeyMap[key];
        } else {
          // 改过直接从draft取最新状态
          if (draftState.mutated) {
            return draftValue[key];
          } // 不存在的，或者值为基本值的现有属性，代理到原值


          return Reflect.get(target, key, receiver);
        }
      },
      set: function set(target, key, value) {
        // 监听修改，用新值重写原值
        // 如果新值不为基本值类型，创建下一层代理
        if (_typeof(value) === 'object') {
          proxiedKeyMap[key] = proxyProp(value, key, draftState, onWrite);
        } // 第一次写时复制


        copyOnWrite(draftState); // 复制过了，直接写

        draftValue[key] = value;
        return true;
      },
      // 代理其它读方法
      has: function has(_) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        return Reflect.has.apply(Reflect, [getTarget(draftState)].concat(args));
      },
      ownKeys: function ownKeys(_) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        return Reflect.ownKeys.apply(Reflect, [getTarget(draftState)].concat(args));
      },
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(_) {
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }

        return Reflect.getOwnPropertyDescriptor.apply(Reflect, [getTarget(draftState)].concat(args));
      },
      getPrototypeOf: function getPrototypeOf(_) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }

        return Reflect.getPrototypeOf.apply(Reflect, [original].concat(args));
      },
      // 代理其它写方法
      deleteProperty: function deleteProperty(_) {
        copyOnWrite(draftState);

        for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          args[_key5 - 1] = arguments[_key5];
        }

        return Reflect.deleteProperty.apply(Reflect, [draftValue].concat(args));
      },
      defineProperty: function defineProperty(_) {
        copyOnWrite(draftState);

        for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          args[_key6 - 1] = arguments[_key6];
        }

        return Reflect.defineProperty.apply(Reflect, [draftValue].concat(args));
      },
      setPrototypeOf: function setPrototypeOf(_) {
        copyOnWrite(draftState);

        for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
          args[_key7 - 1] = arguments[_key7];
        }

        return Reflect.setPrototypeOf.apply(Reflect, [draftValue].concat(args));
      }
    });
    return draft;
  }

  function produce(original, producer) {
    var draft = proxy(original); // 修改draft

    producer(draft); // 取出draft内部状态

    var _draft$INTERNAL_STATE = draft[INTERNAL_STATE_KEY],
        originalValue = _draft$INTERNAL_STATE.originalValue,
        draftValue = _draft$INTERNAL_STATE.draftValue,
        mutated = _draft$INTERNAL_STATE.mutated; // console.log('-- draftState --');
    // console.log(draft[INTERNAL_STATE_KEY]);
    // 将改过的新值patch上去

    var next = mutated ? draftValue : originalValue;
    return next;
  }

  exports.produce = produce;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.map
